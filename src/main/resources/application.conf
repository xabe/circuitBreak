bounded-mailbox {
  mailbox-type = "akka.dispatch.BoundedMailbox"
  mailbox-capacity = 14
  mailbox-push-timeout-time = 0ms
}

unbounded-mailbox {
  mailbox-type = "akka.dispatch.UnboundedMailbox"
  mailbox-capacity = 1
  mailbox-push-timeout-time = 5ms
}


akka {
	loglevel = "INFO"
	stdout-loglevel = "INFO"
	log-config-on-start = off
	log-dead-letters = on
	event-handler-startup-timeout = 5s
	jvm-exit-on-fatal-error = on

	actor {
		creation-timeout = 20s
		typed {
			timeout = 5s
		}
		debug {
			receive = off
			autoreceive = off
			lifecycle = off
		}
		# enable DEBUG logging of actor lifecycle changes
		debug.lifecycle = off
		# enable DEBUG logging of subscription changes on the eventStream
		event-stream = off
		# enable DEBUG logging of all LoggingFSMs for events, transitions and timers
		fsm = off
		# mandatory to serialize all messages, even in local. Only for testing
		# Serializes and deserializes (non-primitive) messages to ensure immutability,
		# this is only intended for testing.
		serialize-messages = off
		allow-java-serialization = off
		warn-about-java-serializer-usage = true
		
		serializers {
      		java = "akka.serialization.JavaSerializer"
      		proto = "akka.remote.serialization.ProtobufSerializer"
      		kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    	}
    	
    	serialization-bindings {
    		"java.io.Serializable" = proto
		}

		# Serializes and deserializes creators (in Props) to ensure that they can be sent over the network,
		# this is only intended for testing.
		serialize-creators = off

		mailbox.requirements {
			"akka.dispatch.BoundedDequeBasedMessageQueueSemantics" = bounded-mailbox
		}

		default-dispatcher {
			# Must be one of the following
			# Dispatcher, (BalancingDispatcher, only valid when all actors using it are of
			# the same type), PinnedDispatcher, or a FQCN to a class inheriting
			# MessageDispatcherConfigurator with a constructor with
			# com.typesafe.config.Config parameter and akka.dispatch.DispatcherPrerequisites
			# parameters.
			# PinnedDispatcher must be used toghether with executor=thread-pool-executor.
			type = "Dispatcher"

			executor = "fork-join-executor"

			# This will be used if you have set "executor = "fork-join-executor""
			fork-join-executor {
				# Min number of threads to cap factor-based parallelism number to
				parallelism-min = 8

				# Parallelism (threads) ... ceil(available processors * factor)
				parallelism-factor = 6.0

				# Max number of threads to cap factor-based parallelism number to
				parallelism-max = 64
			}

			# This will be used if you have set "executor = "thread-pool-executor""
			thread-pool-executor {
				# Keep alive time for threads
				keep-alive-time = 60s

				# Min number of threads to cap factor-based core number to
				core-pool-size-min = 8

				# No of core threads ... ceil(available processors * factor)
				core-pool-size-factor = 6.0

				# Max number of threads to cap factor-based number to
				core-pool-size-max = 64

				# Hint: max-pool-size is only used for bounded task queues
				# minimum number of threads to cap factor-based max number to
				max-pool-size-min = 8

				# Max no of threads ... ceil(available processors * factor)
				max-pool-size-factor  = 1.0

				# Max number of threads to cap factor-based max number to
				max-pool-size-max = 64

				# Specifies the bounded capacity of the task queue (< 1 == unbounded)
				task-queue-size = -1

				# Specifies which type of task queue will be used, can be "array" or
				# "linked" (default)
				task-queue-type = "linked"

				# Allow core threads to time out
				allow-core-timeout = on
			}

			# How long time the dispatcher will wait for new actors until it shuts down
			shutdown-timeout = 1s

			# Throughput defines the number of messages that are processed in a batch
			# before the thread is returned to the pool. Set to 1 for as fair as possible.
			throughput = 10

			# Throughput deadline for Dispatcher, set to 0 or negative for no deadline
			throughput-deadline-time = 0ms

			# If negative (or zero) then an unbounded mailbox is used (default)
			# If positive then a bounded mailbox is used and the capacity is set using the
			# property
			# NOTE: setting a mailbox to 'blocking' can be a bit dangerous, could lead to
			# deadlock, use with care
			# The following mailbox-push-timeout-time is only used for type=Dispatcher and
			# only if mailbox-capacity > 0
			mailbox-capacity = -1

			# Specifies the timeout to add a new message to a mailbox that is full -
			# negative number means infinite timeout. It is only used for type=Dispatcher
			# and only if mailbox-capacity > 0
			mailbox-push-timeout-time = 10s

			# FQCN of the MailboxType, if not specified the default bounded or unbounded
			# mailbox is used. The Class of the FQCN must have a constructor with
			# (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
			mailbox-type = ""

			# For BalancingDispatcher: If the balancing dispatcher should attempt to
			# schedule idle actors using the same dispatcher when a message comes in,
			# and the dispatchers ExecutorService is not fully busy already.
			attempt-teamwork = on

			# For Actor with Stash: The default capacity of the stash.
			# If negative (or zero) then an unbounded stash is used (default)
			# If positive then a bounded stash is used and the capacity is set using the
			# property
			stash-capacity = -1
		}	
	}



}